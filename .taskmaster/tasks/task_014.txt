# Task ID: 14
# Title: Implement Backend tRPC Procedures for 2FA Management
# Status: pending
# Dependencies: 8, 13
# Priority: medium
# Description: Build server-side logic for TOTP, WebAuthn, and recovery code management
# Details:
Create tRPC procedures for enabling/disabling TOTP, WebAuthn device registration and authentication, recovery code generation and verification. Implement proper security measures and user authorization.

# Test Strategy:
Test all 2FA management endpoints with proper authentication and verify security measures are in place.

# Subtasks:
## 1. Enable/Disable TOTP Procedures [pending]
### Dependencies: None
### Description: Create tRPC procedures to generate TOTP secrets, verify TOTP codes, enable TOTP for a user, and disable TOTP.
### Details:
Use a TOTP library (e.g., speakeasy) to generate and validate secrets. Store secrets securely in the database tied to the user. Implement input validation, authorization checks, and error handling for enabling/disabling.

## 2. WebAuthn Registration Flow [pending]
### Dependencies: None
### Description: Implement tRPC procedures for starting and completing WebAuthn registration, including challenge generation and attestation verification.
### Details:
Use a WebAuthn server library (e.g., @simplewebauthn/server) to generate registration options (challenge, rp info, user info) and verify the attestation response. Store credential ID, public key, sign count, and other metadata securely.

## 3. List and Remove Authenticators [pending]
### Dependencies: 14.1, 14.2
### Description: Create tRPC procedures to list all registered 2FA authenticators for a user and remove a specific authenticator or TOTP.
### Details:
Fetch registered WebAuthn credentials and TOTP metadata from the database. Implement a removal endpoint that revokes or deletes the selected authenticator after authorization checks.

## 4. Recovery Code Management [pending]
### Dependencies: 14.1
### Description: Implement tRPC procedures to generate, list, verify, and rotate recovery codes for user account recovery.
### Details:
Generate a set of random recovery codes, hash them before storing in the database, provide a masked list to the user, verify and consume codes during login, and allow code rotation. Ensure secure storage and rate limiting.

