# Task ID: 15
# Title: Integrate Frontend with Backend Endpoints
# Status: pending
# Dependencies: 9, 10, 11, 13, 14
# Priority: high
# Description: Connect all frontend components to backend tRPC procedures and finalize application
# Details:
Complete the integration between frontend authentication pages, dashboard, and backend tRPC procedures. Implement proper error handling, loading states, and user feedback. Ensure all authentication flows work end-to-end.

# Test Strategy:
Perform comprehensive end-to-end testing of all authentication flows including registration, login, email verification, 2FA setup and verification, and dashboard functionality.

# Subtasks:
## 1. Connect Authentication Pages to tRPC Mutations [pending]
### Dependencies: None
### Description: Wire up login, signup, password reset, and email verification pages to their respective tRPC mutations.
### Details:
Import tRPC hooks into LoginPage, SignupPage, ForgotPasswordPage, and VerifyEmailPage. Map form submissions to mutation calls, handle responses, display validation errors, and navigate on success.

## 2. Integrate 2FA Verification and Management UIs [pending]
### Dependencies: 15.1
### Description: Hook up the 2FA setup, verification, and management dashboard interfaces to backend tRPC procedures.
### Details:
Use tRPC queries and mutations in TwoFactorSetupPage, TwoFactorVerifyPage, and TwoFactorDashboard. Implement flows for enabling/disabling TOTP, WebAuthn device registration, recovery code generation, and verification responses.

## 3. Implement Global Loading and Error Handling [pending]
### Dependencies: 15.1
### Description: Create consistent application-wide indicators for loading states and display errors from tRPC across all pages.
### Details:
Develop a centralized hook or context to intercept tRPC loading and error states. Integrate a shared loading spinner component and error toast/modal. Ensure all useMutation and useQuery calls utilize this handler.

## 4. Wire Up React Query Cache and Data Fetching [pending]
### Dependencies: 15.1, 15.3
### Description: Set up client-side data fetching with React Query and configure cache invalidation rules for authentication-related queries.
### Details:
Configure the React Query QueryClient with default options. Define stable cache keys for getUser, get2FAStatus, etc. Use trpc.useQuery/useMutation, and invalidate relevant queries on login, logout, and 2FA changes.

## 5. Perform End-to-End Authentication Testing [pending]
### Dependencies: 15.1, 15.2, 15.3, 15.4
### Description: Execute comprehensive end-to-end tests covering registration, login, email verification, 2FA setup, and management.
### Details:
Write Cypress tests for all authentication journeys: signup, login (with and without 2FA), password reset, email verification, TOTP and WebAuthn enable/disable. Validate UI flows, form validations, and backend responses.

