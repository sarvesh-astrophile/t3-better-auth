{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Initialize T3 Stack Project",
        "description": "Set up the foundational T3 stack project with TypeScript, Next.js, tRPC, Prisma, and Tailwind CSS",
        "status": "done",
        "priority": "high",
        "dependencies": [],
        "details": "Initialize a new T3 Stack project with all required dependencies. Ensure proper TypeScript configuration, Next.js App Router setup, tRPC configuration, Prisma ORM setup, and Tailwind CSS integration.",
        "testStrategy": "Verify that the project builds successfully and all T3 stack components are properly configured and accessible."
      },
      {
        "id": 2,
        "title": "Set up shadcn/ui",
        "description": "Install and configure shadcn/ui component library for consistent UI components",
        "status": "done",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "details": "Install shadcn/ui CLI tool, initialize the components library, configure themes, and set up the basic component structure. Ensure proper integration with Tailwind CSS and TypeScript.",
        "testStrategy": "Create a test page with basic shadcn/ui components to verify proper installation and styling."
      },
      {
        "id": 3,
        "title": "Integrate and Configure better-auth Library",
        "description": "Set up better-auth with secure cookie settings and basic authentication configuration",
        "status": "in-progress",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "details": "Install better-auth library, configure authentication providers, set up secure cookie management with httpOnly, secure, and SameSite attributes. Configure session management and basic authentication flow.",
        "testStrategy": "Verify that authentication configuration is properly set up and secure cookie settings are correctly applied.",
        "subtasks": [
          {
            "id": 1,
            "title": "Install better-auth and peer dependencies",
            "description": "Install the better-auth library and all required peer dependencies",
            "dependencies": [],
            "details": "Use npm or yarn to install better-auth; install any listed peer dependencies; verify installation in package.json\n<info added on 2025-08-03T04:31:07.690Z>\nSuccessfully installed better-auth and dependencies.\nInstalled packages:\nbetter-auth@1.3.4 (main authentication library)\njsonwebtoken@9.0.2 (JWT handling)\ncookie@1.0.2 (cookie management)\n@types/jsonwebtoken@9.0.10 (TypeScript types)\n@types/cookie@1.0.0 (TypeScript types)\n\nKey findings from better-auth documentation:\nPrisma adapter is included in main better-auth package: `import { prismaAdapter } from \"better-auth/adapters/prisma\"`\nNo separate @better-auth/prisma-adapter package needed.\nWe already have all required peer dependencies: Next.js, React, Prisma, Zod, Superjson, tRPC.\nReady to proceed with auth configuration.\n</info added on 2025-08-03T04:31:07.690Z>",
            "status": "done",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create main auth handler and configure Prisma adapter",
            "description": "Set up the primary authentication handler file and integrate the Prisma adapter",
            "dependencies": [
              "3.1"
            ],
            "details": "Create auth handler (e.g., auth.ts); import better-auth and Prisma adapter; initialize better-auth with Prisma adapter; export the handler",
            "status": "in-progress",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Configure session management and secure cookie settings",
            "description": "Define session strategy and configure secure cookie options",
            "dependencies": [
              "3.2"
            ],
            "details": "In auth config, set session strategy; configure cookie options: httpOnly: true, secure: true, sameSite: 'lax'; test cookie behavior",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Define basic authentication providers",
            "description": "Add and configure basic credentials provider in the auth configuration",
            "dependencies": [
              "3.2"
            ],
            "details": "Add Credentials provider to better-auth config; implement authorize callback to verify user credentials; include provider in export",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 4,
        "title": "Integrate Plunk SDK for Email Sending",
        "description": "Set up Plunk email service for transactional emails including verification and password reset",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          "1"
        ],
        "details": "Install Plunk SDK, configure API credentials, set up email templates for verification emails, password reset emails, and other transactional messages. Implement email sending utilities.",
        "testStrategy": "Send test emails through Plunk API to verify integration and template rendering."
      },
      {
        "id": 5,
        "title": "Set up Database and Prisma Schema",
        "description": "Configure PostgreSQL database and define Prisma schema with email verification tracking",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          "1"
        ],
        "details": "Set up PostgreSQL database, design and implement Prisma schema for User, Session, Account models, and email verification tracking. Include models for 2FA/WebAuthn support as required by better-auth.",
        "testStrategy": "Run database migrations successfully and verify that all required tables and relationships are created correctly.",
        "subtasks": [
          {
            "id": 1,
            "title": "Provision PostgreSQL Database and Configure DATABASE_URL",
            "description": "Deploy a PostgreSQL instance and configure the DATABASE_URL environment variable.",
            "dependencies": [],
            "details": "• Choose deployment method (Docker, cloud provider, etc.)\n• Obtain connection string\n• Add DATABASE_URL to .env or environment configuration",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Define User, Session, and Account Models in schema.prisma",
            "description": "Add core authentication models to schema.prisma to support user accounts and sessions.",
            "dependencies": [
              "5.1"
            ],
            "details": "• Define User model with id, email, name, password, etc.\n• Define Session model with sessionToken, userId, expires\n• Define Account model for OAuth providers with provider, providerAccountId, userId",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Add Email Verification and 2FA/WebAuthn Models",
            "description": "Extend schema.prisma with models and fields to support email verification and 2FA/WebAuthn.",
            "dependencies": [
              "5.2"
            ],
            "details": "• Add EmailVerification model with token, userId, expires\n• Add WebAuthnCredential model with id, userId, publicKey, counter\n• Add fields like totpSecret and recoveryCodes to User model",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Run prisma migrate dev and Generate Prisma Client",
            "description": "Execute migrations to apply the schema changes and generate the Prisma Client.",
            "dependencies": [
              "5.3"
            ],
            "details": "• Run `npx prisma migrate dev --name init-auth`\n• Run `npx prisma generate`\n• Verify tables and client generation",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 6,
        "title": "Configure Google OAuth and API Credentials",
        "description": "Set up Google OAuth 2.0 API credentials and configure authentication provider",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          "3"
        ],
        "details": "Create Google OAuth 2.0 application, configure authorized redirect URIs, obtain client ID and secret, and integrate with better-auth Google provider. Set up environment variables securely.",
        "testStrategy": "Test Google OAuth flow in development environment to ensure proper authentication and user data retrieval.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create OAuth 2.0 Client ID in Google Cloud Console",
            "description": "Create an OAuth 2.0 Client ID for your application in the Google Cloud Console under APIs & Services > Credentials.",
            "dependencies": [],
            "details": "In the Google Cloud Console, select your project, navigate to APIs & Services > Credentials, click Create Credentials > OAuth client ID, choose Web application, provide a name, and create the client.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Configure OAuth consent screen and authorized redirect URIs",
            "description": "Set up the OAuth consent screen and add authorized redirect URIs for the OAuth client.",
            "dependencies": [
              "6.1"
            ],
            "details": "Open OAuth consent screen in the Console, fill in app information, add required scopes and test users; then edit the created OAuth client and add redirect URIs such as https://yourapp.com/api/auth/callback/google.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Securely store credentials and configure better-auth provider",
            "description": "Store the Client ID and Client Secret in environment variables and configure the Google provider in better-auth.",
            "dependencies": [
              "6.2"
            ],
            "details": "Add GOOGLE_CLIENT_ID and GOOGLE_CLIENT_SECRET to your .env file; update your better-auth configuration to include the Google provider using these environment variables and set the correct callback URL.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 7,
        "title": "Implement Secure Cookie Management and CSRF Protection",
        "description": "Set up comprehensive security measures for authentication states and form submissions",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          "3"
        ],
        "details": "Implement secure cookie configuration with proper expiration, domain scoping, and security headers. Set up CSRF protection for all forms and sensitive endpoints. Configure temporary state management for multi-step authentication flows.",
        "testStrategy": "Verify that all cookies are properly configured with security attributes and CSRF protection is working for form submissions.",
        "subtasks": [
          {
            "id": 1,
            "title": "Audit and Enforce Secure Cookie Attributes",
            "description": "Audit all session cookies and enforce HttpOnly, Secure, and SameSite=Strict attributes via middleware or configuration.",
            "dependencies": [],
            "details": "1. Inventory all cookies issued by the application 2. Implement middleware or framework config to set HttpOnly, Secure, SameSite=Strict 3. Verify headers in browser dev tools",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement CSRF Protection Middleware",
            "description": "Implement a CSRF protection strategy using the double submit cookie pattern with middleware to generate and validate tokens.",
            "dependencies": [
              "7.1"
            ],
            "details": "1. Create middleware to generate a random CSRF token on each session 2. Set token in a secure, sameSite cookie and expose to client 3. Validate token from request header or body against cookie value 4. Return 403 on mismatch",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Integrate CSRF Tokens into Frontend Forms",
            "description": "Integrate the CSRF token into all frontend forms performing state-changing actions to ensure protection.",
            "dependencies": [
              "7.2"
            ],
            "details": "1. Fetch CSRF token from the cookie or endpoint 2. Include token as hidden input in form components 3. Update AJAX/fetch requests to include token header 4. Test form submissions to confirm validation",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 8,
        "title": "Implement Backend Authentication and Email Verification Logic",
        "description": "Build server-side authentication logic and email verification system",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          "3",
          "4",
          "5"
        ],
        "details": "Create tRPC procedures for user registration, login, email verification, and password reset. Implement server-side validation, secure password handling, and email verification workflow with better-auth integration.",
        "testStrategy": "Test all authentication endpoints with various scenarios including successful and failed authentication attempts.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create auth.signup procedure",
            "description": "Create the auth.signup tRPC procedure with input validation, password hashing, and triggering a verification email.",
            "dependencies": [],
            "details": "Define input schema, validate user data, hash password securely (e.g., bcrypt), store user in database, generate email verification token, send verification email via email service.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Create auth.login procedure",
            "description": "Create the auth.login tRPC procedure with credential validation and session creation.",
            "dependencies": [
              "8.1"
            ],
            "details": "Validate user credentials against stored hashed password, generate and persist session token or JWT, return session data, handle authentication errors.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement auth.requestPasswordReset and auth.resetPassword procedures",
            "description": "Implement the auth.requestPasswordReset and auth.resetPassword tRPC procedures for handling password reset flow.",
            "dependencies": [
              "8.1"
            ],
            "details": "In requestPasswordReset, accept user email, generate password reset token, store or sign token, send reset email; in resetPassword, validate token, hash new password, update user record, invalidate or expire token.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Implement auth.verifyEmail procedure",
            "description": "Implement the auth.verifyEmail tRPC procedure to validate email verification tokens and update user status.",
            "dependencies": [
              "8.1"
            ],
            "details": "Accept verification token, verify token validity, mark user email as verified in database, handle expired or invalid tokens.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Implement auth.logout procedure",
            "description": "Implement the auth.logout tRPC procedure to invalidate the user session.",
            "dependencies": [
              "8.2"
            ],
            "details": "Accept session identifier or context, invalidate session in session store or revoke JWT, clear authentication cookies if used.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 9,
        "title": "Build Homepage and Authentication Pages",
        "description": "Create the homepage and authentication UI pages: /auth/login, /auth/signup, /auth/verify-email",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          "2",
          "7"
        ],
        "details": "Design and implement the homepage with login/signup buttons and Google One-Tap integration. Build authentication pages using shadcn/ui components with proper form validation, error handling, and responsive design.",
        "testStrategy": "Navigate through all authentication pages and verify proper form functionality, validation, and user experience.",
        "subtasks": [
          {
            "id": 1,
            "title": "/auth/signup Page",
            "description": "Create the signup page at /auth/signup with a form for user registration, including email, password, and confirm password fields.",
            "dependencies": [],
            "details": "Use react-hook-form for state management, integrate Zod for schema validation, utilize shadcn/ui Input and Button components, display validation errors, handle async submission and loading states, and ensure responsive styling with Tailwind CSS.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "/auth/login Page",
            "description": "Implement the login page at /auth/login with a form for user authentication, including email and password fields.",
            "dependencies": [],
            "details": "Use react-hook-form and Zod for form state and validation, employ shadcn/ui form components, show server-side error messages, manage loading state during submission, redirect on success, and apply responsive design with Tailwind CSS.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "/auth/verify-email Page",
            "description": "Build the email verification instruction page at /auth/verify-email with a message prompting users to check their inbox and a 'Resend Email' button.",
            "dependencies": [
              "9.1"
            ],
            "details": "Use shadcn/ui Alert and Button components to display instructions and resend option, handle click to call resend endpoint, manage loading and error states, and ensure mobile-responsive layout.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Homepage with Conditional UI",
            "description": "Implement the homepage showing different UI for authenticated vs. unauthenticated users, with login/signup buttons and Google One-Tap integration.",
            "dependencies": [],
            "details": "Fetch authentication state via tRPC session, display shadcn/ui Buttons linking to /auth/login and /auth/signup for guests, show user menu for authenticated users, integrate Google One-Tap prompt, and ensure responsive nav and layout with Tailwind CSS.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 10,
        "title": "Implement Email Verification Enforcement",
        "description": "Build email verification enforcement logic and redirection flow",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          "8",
          "9"
        ],
        "details": "Implement middleware to check email verification status, redirect unverified users to verification page, handle verification links, and provide options to resend verification emails. Ensure all protected routes enforce email verification.",
        "testStrategy": "Test email verification flow with new user registration and ensure unverified users cannot access protected areas.",
        "subtasks": [
          {
            "id": 1,
            "title": "Create Next.js Middleware for Protected Routes",
            "description": "Initialize a Next.js middleware file to intercept incoming requests targeting protected routes.",
            "dependencies": [],
            "details": "Create middleware.ts at the project root; import NextRequest and NextResponse from 'next/server'; export a default middleware function that receives the request and response objects.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Email Verification Check in Middleware",
            "description": "Add logic within the middleware to inspect the user session and verify the emailVerified flag.",
            "dependencies": [
              "10.1"
            ],
            "details": "Retrieve the authentication session from cookies or headers using next-auth's getToken or getSession; check session.user.emailVerified; if true, allow the request to proceed.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Configure Middleware Redirects and Route Exclusions",
            "description": "Configure middleware to redirect unverified users to the verification page and exclude public and auth paths to prevent redirect loops.",
            "dependencies": [
              "10.1",
              "10.2"
            ],
            "details": "Define arrays for public routes (e.g., '/', '/api/auth/*', '/verification') and protected routes matcher; in middleware, if path is excluded, bypass checks; if emailVerified is false and path is protected, use NextResponse.redirect to send users to '/verification'.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 11,
        "title": "Implement 2FA Verification Flow",
        "description": "Build the post-login 2FA verification system including /auth/verify-2fa page",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          "8",
          "9"
        ],
        "details": "Create 2FA verification page and logic to handle TOTP codes, WebAuthn prompts, and recovery codes. Implement temporary state management for users pending 2FA verification and proper session establishment after successful verification.",
        "testStrategy": "Test 2FA verification flow with different methods (TOTP, WebAuthn, recovery codes) and verify proper session handling.",
        "subtasks": [
          {
            "id": 1,
            "title": "Build 2FA Verification UI",
            "description": "Create the /auth/verify-2fa page to accept TOTP codes, recovery codes, or trigger WebAuthn prompts",
            "dependencies": [],
            "details": "Design form layout, input fields for TOTP and recovery codes, integrate WebAuthn JavaScript for credential requests, include client-side validation and error feedback",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement Backend Verification Logic",
            "description": "Add server-side endpoint to verify submitted TOTP, recovery codes, and WebAuthn assertions",
            "dependencies": [
              "11.1"
            ],
            "details": "Parse and validate credentials against stored user secrets or WebAuthn challenge, handle error cases, update attempt counters, and log verification events",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Manage Intermediate Authentication State",
            "description": "Implement secure temporary state management for users pending 2FA using a short-lived signed cookie",
            "dependencies": [
              "11.2"
            ],
            "details": "Generate and sign a partial-auth cookie after password login, enforce cookie presence on /auth/verify-2fa, set HttpOnly, Secure flags, and configure expiration",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Elevate Session and Redirect",
            "description": "On successful 2FA verification, upgrade the session to fully authenticated, clear temporary state, and redirect the user",
            "dependencies": [
              "11.3"
            ],
            "details": "Remove partial-auth cookie, set full-auth session flag or token, persist session in store, and redirect to the originally requested protected route",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 12,
        "title": "Implement Google One-Tap Login",
        "description": "Add Google One-Tap functionality to homepage with verification checks",
        "status": "pending",
        "priority": "low",
        "dependencies": [
          "6",
          "10",
          "11"
        ],
        "details": "Integrate Google One-Tap authentication on the homepage for returning users with active Google sessions. Ensure One-Tap users still go through email verification and 2FA checks as needed.",
        "testStrategy": "Test One-Tap login flow with various user states (verified/unverified email, 2FA enabled/disabled).",
        "subtasks": [
          {
            "id": 1,
            "title": "Integrate Google Identity Services library script",
            "description": "Add the Google One-Tap script to the project HTML or dynamically load it.",
            "dependencies": [],
            "details": "Include the official Google One-Tap script tag from https://accounts.google.com/gsi/client in the application’s main HTML template or load it at runtime. Ensure it uses the correct Google client ID sourced from environment variables and is available before invoking any GIS functions.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Implement frontend logic to initialize and render the One-Tap prompt",
            "description": "Initialize and display the Google One-Tap prompt on the homepage.",
            "dependencies": [
              "12.1"
            ],
            "details": "In the client code, call google.accounts.id.initialize with the configured client_id, a placeholder callback, and prompt options (e.g., auto_select, cancel_on_tap_outside). Then invoke google.accounts.id.prompt to render the One-Tap UI when appropriate, ensuring it only appears for users with active Google sessions.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Create frontend callback to send Google ID token to backend",
            "description": "Handle the One-Tap response and forward the ID token to the server.",
            "dependencies": [
              "12.2"
            ],
            "details": "Define the callback function provided to google.accounts.id.initialize to receive the credential response. Extract the JWT credential and send it via a fetch request or tRPC client call to the backend endpoint/procedure (e.g., auth.googleOneTap). Implement UI loading and error states during the request.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Create backend tRPC procedure to verify token and complete login/signup flow",
            "description": "Implement server-side verification of the Google ID token and user authentication logic.",
            "dependencies": [
              "12.3"
            ],
            "details": "In the backend auth router, create a new tRPC procedure (e.g., googleOneTap). Verify the incoming token using Google’s OAuth2 client library or JWKS. Extract user info (email, name, sub), upsert the user in the database, enforce email verification and 2FA as configured, generate a session, and return session data to the client.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 13,
        "title": "Build 2FA Management Dashboard UI",
        "description": "Create the security dashboard at /dashboard/security for 2FA management",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          "2",
          "11"
        ],
        "details": "Design and implement the security dashboard allowing users to enable/disable TOTP, register WebAuthn devices, view and regenerate recovery codes. Use shadcn/ui components for consistent styling.",
        "testStrategy": "Navigate through security dashboard and test all 2FA management features including device registration and code generation.",
        "subtasks": [
          {
            "id": 1,
            "title": "Build TOTP Setup Component",
            "description": "Implement the TOTP setup UI allowing users to view a QR code and enter a generated code for verification.",
            "dependencies": [],
            "details": "Use shadcn/ui components for form and layout. Fetch TOTP secret and QR code data via tRPC. Display QR code with a library like qrcode.react. Provide an input for users to enter the 6-digit code. Handle loading, success, and error states with clear feedback.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Build WebAuthn Management Component",
            "description": "Create the WebAuthn UI to list registered devices and initiate new device registration.",
            "dependencies": [],
            "details": "Use shadcn/ui list and button components. Fetch registered authenticator credentials via tRPC and render a device list with metadata. Implement registration flow: call tRPC to get challenge, invoke WebAuthn API, then verify assertion on the backend. Handle permissions, errors, and loading states.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Build Recovery Codes Component",
            "description": "Develop the recovery codes UI to securely display current codes and allow regeneration.",
            "dependencies": [],
            "details": "Use shadcn/ui cards and buttons. Fetch current recovery codes via tRPC and display them in a masked or reveal-on-click format. Implement regeneration flow: confirm user action in a modal, call tRPC to regenerate, then update the list. Support copy-to-clipboard and handle loading/errors.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Integrate Components with Backend",
            "description": "Integrate TOTP, WebAuthn, and recovery codes components with backend procedures, managing state and UI flows.",
            "dependencies": [
              "13.1",
              "13.2",
              "13.3"
            ],
            "details": "Wire each component to the corresponding tRPC endpoints for setup, verification, registration, listing, and regeneration. Use a global state management solution (e.g., React Context or Zustand) to coordinate modal visibility and loading indicators. Ensure consistent error handling, spinners, and success notifications across all components.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 14,
        "title": "Implement Backend tRPC Procedures for 2FA Management",
        "description": "Build server-side logic for TOTP, WebAuthn, and recovery code management",
        "status": "pending",
        "priority": "medium",
        "dependencies": [
          "8",
          "13"
        ],
        "details": "Create tRPC procedures for enabling/disabling TOTP, WebAuthn device registration and authentication, recovery code generation and verification. Implement proper security measures and user authorization.",
        "testStrategy": "Test all 2FA management endpoints with proper authentication and verify security measures are in place.",
        "subtasks": [
          {
            "id": 1,
            "title": "Enable/Disable TOTP Procedures",
            "description": "Create tRPC procedures to generate TOTP secrets, verify TOTP codes, enable TOTP for a user, and disable TOTP.",
            "dependencies": [],
            "details": "Use a TOTP library (e.g., speakeasy) to generate and validate secrets. Store secrets securely in the database tied to the user. Implement input validation, authorization checks, and error handling for enabling/disabling.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "WebAuthn Registration Flow",
            "description": "Implement tRPC procedures for starting and completing WebAuthn registration, including challenge generation and attestation verification.",
            "dependencies": [],
            "details": "Use a WebAuthn server library (e.g., @simplewebauthn/server) to generate registration options (challenge, rp info, user info) and verify the attestation response. Store credential ID, public key, sign count, and other metadata securely.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "List and Remove Authenticators",
            "description": "Create tRPC procedures to list all registered 2FA authenticators for a user and remove a specific authenticator or TOTP.",
            "dependencies": [
              "14.1",
              "14.2"
            ],
            "details": "Fetch registered WebAuthn credentials and TOTP metadata from the database. Implement a removal endpoint that revokes or deletes the selected authenticator after authorization checks.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Recovery Code Management",
            "description": "Implement tRPC procedures to generate, list, verify, and rotate recovery codes for user account recovery.",
            "dependencies": [
              "14.1"
            ],
            "details": "Generate a set of random recovery codes, hash them before storing in the database, provide a masked list to the user, verify and consume codes during login, and allow code rotation. Ensure secure storage and rate limiting.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 15,
        "title": "Integrate Frontend with Backend Endpoints",
        "description": "Connect all frontend components to backend tRPC procedures and finalize application",
        "status": "pending",
        "priority": "high",
        "dependencies": [
          "9",
          "10",
          "11",
          "13",
          "14"
        ],
        "details": "Complete the integration between frontend authentication pages, dashboard, and backend tRPC procedures. Implement proper error handling, loading states, and user feedback. Ensure all authentication flows work end-to-end.",
        "testStrategy": "Perform comprehensive end-to-end testing of all authentication flows including registration, login, email verification, 2FA setup and verification, and dashboard functionality.",
        "subtasks": [
          {
            "id": 1,
            "title": "Connect Authentication Pages to tRPC Mutations",
            "description": "Wire up login, signup, password reset, and email verification pages to their respective tRPC mutations.",
            "dependencies": [],
            "details": "Import tRPC hooks into LoginPage, SignupPage, ForgotPasswordPage, and VerifyEmailPage. Map form submissions to mutation calls, handle responses, display validation errors, and navigate on success.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Integrate 2FA Verification and Management UIs",
            "description": "Hook up the 2FA setup, verification, and management dashboard interfaces to backend tRPC procedures.",
            "dependencies": [
              "15.1"
            ],
            "details": "Use tRPC queries and mutations in TwoFactorSetupPage, TwoFactorVerifyPage, and TwoFactorDashboard. Implement flows for enabling/disabling TOTP, WebAuthn device registration, recovery code generation, and verification responses.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "Implement Global Loading and Error Handling",
            "description": "Create consistent application-wide indicators for loading states and display errors from tRPC across all pages.",
            "dependencies": [
              "15.1"
            ],
            "details": "Develop a centralized hook or context to intercept tRPC loading and error states. Integrate a shared loading spinner component and error toast/modal. Ensure all useMutation and useQuery calls utilize this handler.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "Wire Up React Query Cache and Data Fetching",
            "description": "Set up client-side data fetching with React Query and configure cache invalidation rules for authentication-related queries.",
            "dependencies": [
              "15.1",
              "15.3"
            ],
            "details": "Configure the React Query QueryClient with default options. Define stable cache keys for getUser, get2FAStatus, etc. Use trpc.useQuery/useMutation, and invalidate relevant queries on login, logout, and 2FA changes.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "Perform End-to-End Authentication Testing",
            "description": "Execute comprehensive end-to-end tests covering registration, login, email verification, 2FA setup, and management.",
            "dependencies": [
              "15.1",
              "15.2",
              "15.3",
              "15.4"
            ],
            "details": "Write Cypress tests for all authentication journeys: signup, login (with and without 2FA), password reset, email verification, TOTP and WebAuthn enable/disable. Validate UI flows, form validations, and backend responses.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      }
    ],
    "metadata": {
      "created": "2025-08-03T03:21:45.871Z",
      "updated": "2025-08-03T04:31:14.238Z",
      "description": "Tasks for master context"
    }
  }
}