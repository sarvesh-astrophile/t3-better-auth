// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
}

model User {
  id               String          @id
  name             String
  email            String
  emailVerified    Boolean         @default(false)
  image            String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  sessions         Session[]
  accounts         Account[]

  // Two-Factor Authentication fields
  twoFactorEnabled     Boolean               @default(false)
  twoFactorSecret      TwoFactorSecret?
  twoFactorBackupCodes TwoFactorBackupCode[]

  passkeys   Passkey[]
  twofactors TwoFactor[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id
  identifier String // Email address
  value      String // Verification token/OTP
  expiresAt  DateTime // Token expiration time
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  type       String   @default("email-verification") // Type: email-verification, sign-in, forget-password
  attempts   Int      @default(0) // Track verification attempts

  @@unique([identifier, value])
  @@index([identifier, type])
  @@index([expiresAt])
  @@map("verification")
}



// Model for storing TOTP secrets for 2FA

model TwoFactorSecret {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  secret    String
  algorithm String
  digits    Int
  period    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("two_factor_secret")
}

// Model for storing 2FA backup codes

model TwoFactorBackupCode {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  code      String   @unique
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("two_factor_backup_code")
}

model Passkey {
  id           String    @id
  name         String?
  publicKey    String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID String
  counter      Int
  deviceType   String
  backedUp     Boolean
  transports   String?
  createdAt    DateTime  @default(now())
  aaguid       String?

  @@map("passkey")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}
